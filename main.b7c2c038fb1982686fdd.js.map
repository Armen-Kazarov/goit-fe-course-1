{"version":3,"sources":["webpack:///./index2.1.js","webpack:///./index2.2.js","webpack:///./index2.3.js","webpack:///./index3.js","webpack:///./index1.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch","endTime","clock","daysSpan","hoursSpan","minutesSpan","secondsSpan","pad","value","String","padStart","deadLineFormat","Date","parse","document","getElementById","querySelector","updateClock","total","days","hours","minutes","seconds","getTimeRemaining","textContent","clearInterval","setInterval","colors","startBtnRef","stopBtnRef","addEventListener","intervalId","getRandomColor","disabled","color","body","style","backgroundColor"],"mappings":"qKAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC1BC,YAAW,WACPF,EAAQF,KACTA,OAIHK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCZbK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAACC,EAASC,GAI3BD,EAHqBY,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMe,EAAkB,SAAAC,GACtB,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GAC3B,IAN+BmB,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDlB,YAAW,WACUoB,KAAKE,SAAW,GAGjCxB,EAAQ,CAAEyB,GAAIN,EAAYM,GAAIrB,KAAMP,IAEpCI,EAAOkB,EAAYM,MAEpB5B,OAID6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIrB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGIuB,EAAW,SAAAF,GACfpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAMtB,KAAKmB,GAAYI,MAAMH,GAC/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,G,cCZvCF,EAAIM,EACrBC,EACAC,EACAC,EACAC,EACAC,EATFC,EAAM,SAAAC,GACV,OAAOC,OAAOD,GAAOE,SAAS,EAAG,IAuB7BC,EAAiB,IAAIC,KAAKA,KAAKC,MAAM,qBApBlBlB,EAqBT,UArBaM,EAqBFU,EApBnBT,EAAQY,SAASC,eAAepB,GAChCQ,EAAWD,EAAMc,cAAc,uBAC/BZ,EAAYF,EAAMc,cAAc,wBAChCX,EAAcH,EAAMc,cAAc,uBAClCV,EAAcJ,EAAMc,cAAc,uBAEpB,SAAdC,IACJ,IAAM3C,EA3Be,SAAC2B,GACxB,IAAM3B,EAAOsC,KAAKC,MAAMZ,GAAWW,KAAKC,MAAM,IAAID,MAKlD,MAAO,CACLM,MAAO5C,EACP6C,KANWZ,EAAIf,KAAKC,MAAMnB,EAAO,QAOjC8C,MANYb,EAAIf,KAAKC,MAAOnB,EAAO,MAAR,OAO3B+C,QANcd,EAAIf,KAAKC,MAAOnB,EAAO,KAAR,MAO7BgD,QANcf,EAAIf,KAAKC,MAAOnB,EAAO,IAAe,OAsBvCiD,CAAiBtB,GAC9BE,EAASqB,YAAclD,EAAK6C,KAC5Bf,EAAUoB,YAAclD,EAAK8C,MAC7Bf,EAAYmB,YAAclD,EAAK+C,QAC/Bf,EAAYkB,YAAclD,EAAKgD,QAC3BhD,EAAK4C,OAAS,GAChBO,cAAcC,YAAYT,EAAa,MAG3CA,I,mBCpCF,IAAMU,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,WAOIC,EAAcd,SAASE,cAAc,yBACrCa,EAAaf,SAASE,cAAc,wBAE1CY,EAAYE,iBAAiB,SAW7B,WACEC,EAAaL,YAAYM,EAAgB,KACzCJ,EAAYK,UAAW,KAZzBJ,EAAWC,iBAAiB,SAe5B,WACMC,IACFN,cAAcM,GACdH,EAAYK,UAAW,MAhB3B,IAAMD,EAAiB,WACrB,IAXiC1C,EAAKC,EAWhC2C,EAAQP,GAXmBrC,EAWc,EAXTC,EAWY,EAV3CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,KAWpDf,QAAQC,IAAI0D,GACZpB,SAASqB,KAAKC,MAAMC,gBAAkBH,GAGpCH,EAAa,O","file":"main.b7c2c038fb1982686fdd.js","sourcesContent":["const delay = ms => {\r\n    return new Promise ((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    });\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n    \r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);","const getTimeRemaining = (endTime) => {\r\n  const time = Date.parse(endTime) - Date.parse(new Date());\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n  const minutes = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const seconds = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n  return {\r\n    total: time,\r\n    days: days,\r\n    hours: hours,\r\n    minutes: minutes,\r\n    seconds: seconds,\r\n  };\r\n};\r\n\r\nconst pad = value => {\r\n  return String(value).padStart(2, 0);\r\n};\r\n\r\nconst initializeClock = (id, endTime) => {\r\n  const clock = document.getElementById(id);\r\n  const daysSpan = clock.querySelector('[data-value=\"days\"]');\r\n  const hoursSpan = clock.querySelector('[data-value=\"hours\"]');\r\n  const minutesSpan = clock.querySelector('[data-value=\"mins\"]');\r\n  const secondsSpan = clock.querySelector('[data-value=\"secs\"]');\r\n\r\n  const updateClock = () => {\r\n    const time = getTimeRemaining(endTime);\r\n    daysSpan.textContent = time.days;\r\n    hoursSpan.textContent = time.hours;\r\n    minutesSpan.textContent = time.minutes;\r\n    secondsSpan.textContent = time.seconds;\r\n    if (time.total <= 0) {\r\n      clearInterval(setInterval(updateClock, 1000));\r\n    };\r\n  };\r\n  updateClock();\r\n};\r\n\r\nconst deadLineFormat = new Date(Date.parse('October 20, 2020'));\r\ninitializeClock('timer-1', deadLineFormat);","const colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst startBtnRef = document.querySelector('[data-action=\"start\"]');\r\nconst stopBtnRef = document.querySelector('[data-action=\"stop\"]');\r\n\r\nstartBtnRef.addEventListener('click', onClickStart);\r\nstopBtnRef.addEventListener('click', onClickStop);\r\n\r\nconst getRandomColor = () => {\r\n  const color = colors[randomIntegerFromInterval(0, 5)];\r\n  console.log(color);\r\n  document.body.style.backgroundColor = color;\r\n};\r\n\r\nlet intervalId = null;\r\n\r\nfunction onClickStart() {\r\n  intervalId = setInterval(getRandomColor, 1000);\r\n  startBtnRef.disabled = true;\r\n};\r\n\r\nfunction onClickStop() {\r\n  if (intervalId) {\r\n    clearInterval(intervalId);\r\n    startBtnRef.disabled = false;\r\n  }\r\n};"],"sourceRoot":""}