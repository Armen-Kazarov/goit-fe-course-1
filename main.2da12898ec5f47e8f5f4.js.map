{"version":3,"sources":["webpack:///./index2.1.js","webpack:///./index2.2.js","webpack:///./index2.3.js","webpack:///./index3.js","webpack:///./index1.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch","pad","value","String","padStart","endTime","clock","document","getElementById","daysSpan","querySelector","hoursSpan","minutesSpan","secondsSpan","updateClock","Date","parse","days","hours","minutes","seconds","getTimeRemaining","textContent","total","clearInterval","timeInterval","setInterval","initializeClock","colors","startBtnRef","stopBtnRef","getRandomColor","color","body","style","backgroundColor","intervalId","addEventListener","disabled"],"mappings":"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","file":"main.2da12898ec5f47e8f5f4.js","sourcesContent":["const delay = ms => {\r\n    return new Promise ((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    });\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n    \r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);","const getTimeRemaining = (endTime) => {\r\n  const time = Date.parse(endTime) - Date.parse(new Date());\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n  const minutes = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const seconds = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n  return {\r\n    time,\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n  };\r\n};\r\n\r\nconst pad = value => {\r\n  return String(value).padStart(2, 0);\r\n};\r\n\r\nconst initializeClock = (id, endTime) => {\r\n  const clock = document.getElementById(id);\r\n  const daysSpan = clock.querySelector('[data-value=\"days\"]');\r\n  const hoursSpan = clock.querySelector('[data-value=\"hours\"]');\r\n  const minutesSpan = clock.querySelector('[data-value=\"mins\"]');\r\n  const secondsSpan = clock.querySelector('[data-value=\"secs\"]');\r\n\r\n  const updateClock = () => {\r\n    const time = getTimeRemaining(endTime);\r\n    daysSpan.textContent = time.days;\r\n    hoursSpan.textContent = time.hours;\r\n    minutesSpan.textContent = time.minutes;\r\n    secondsSpan.textContent = time.seconds;\r\n    if (time.total <= 0) {\r\n      clearInterval(timeInterval);\r\n    };\r\n  };\r\n  updateClock();\r\n  const timeInterval = setInterval(updateClock, 1000);\r\n};\r\n\r\nconst deadLineFormat = new Date(Date.parse('October 30, 2020'));\r\ninitializeClock('timer-1', deadLineFormat);","const colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst startBtnRef = document.querySelector('[data-action=\"start\"]');\r\nconst stopBtnRef = document.querySelector('[data-action=\"stop\"]');\r\n\r\nconst getRandomColor = () => {\r\n  const color = colors[randomIntegerFromInterval(0, 5)];\r\n  console.log(color);\r\n  document.body.style.backgroundColor = color;\r\n};\r\n\r\nlet intervalId = null;\r\n\r\nconst onClickStart = () => {\r\n  intervalId = setInterval(getRandomColor, 1000);\r\n  startBtnRef.disabled = true;\r\n};\r\n\r\nconst onClickStop = () => {\r\n  if (intervalId) {\r\n    clearInterval(intervalId);\r\n    startBtnRef.disabled = false;\r\n  }\r\n};\r\n\r\nstartBtnRef.addEventListener('click', onClickStart);\r\nstopBtnRef.addEventListener('click', onClickStop);"],"sourceRoot":""}